---
# Configure sysctl for SonarQube requirements
- name: Configure sysctl limits for SonarQube requirements
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
  loop:
    - { name: "vm.max_map_count", value: "524288" }
    - { name: "fs.file-max", value: "131072" }

# Create SonarQube user
- name: Create SonarQube group
  group:
    name: "{{ sonarqube_group }}"
    state: present

- name: Create SonarQube user
  user:
    name: "{{ sonarqube_user }}"
    group: "{{ sonarqube_group }}"
    system: yes
    shell: /bin/bash
    home: "/home/{{ sonarqube_user }}"
    createhome: yes
    state: present

- name: Set limits for SonarQube user
  lineinfile:
    path: /etc/security/limits.conf
    line: "{{ sonarqube_user }} {{ item }}"
    state: present
  loop:
    - "soft nofile 131072"
    - "hard nofile 131072"
    - "soft nproc 8192"
    - "hard nproc 8192"

- name: Ensure SonarQube application directory exists
  file:
    path: "{{ app_dir }}/sonarqube"
    state: directory
    owner: "{{ sonarqube_user }}"
    group: "{{ sonarqube_group }}"
    mode: '0755'

- name: Ensure temporary download directory exists
  file:
    path: "{{ app_dir }}/tmp/sonarqube-install"
    state: directory
    mode: '0755'

- name: Download SonarQube if not already present
  get_url:
    url: "{{ sonarqube_url }}"
    dest: "{{ app_dir }}/tmp/sonarqube-install/sonarqube.zip"
    mode: '0644'
    force: no

- name: Check if SonarQube is already installed
  stat:
    path: "{{ app_dir }}/sonarqube/bin"
  register: sonarqube_installed

- name: Extract SonarQube to temporary directory
  unarchive:
    src: "{{ app_dir }}/tmp/sonarqube-install/sonarqube.zip"
    dest: "{{ app_dir }}/tmp/sonarqube-install"
    remote_src: yes
    creates: "{{ app_dir }}/tmp/sonarqube-install/sonarqube-{{ sonarqube_version | default('*') }}"
  when: not sonarqube_installed.stat.exists

- name: Find extracted SonarQube directory
  find:
    paths: "{{ app_dir }}/tmp/sonarqube-install"
    patterns: "sonarqube-*"
    file_type: directory
    recurse: no
  register: sonarqube_dirs
  when: not sonarqube_installed.stat.exists

- name: Fail if no SonarQube directory found
  fail:
    msg: "No SonarQube directory found after extraction"
  when: 
    - not sonarqube_installed.stat.exists
    - sonarqube_dirs.matched == 0

- name: Set fact for extracted SonarQube path
  set_fact:
    extracted_sonarqube_path: "{{ sonarqube_dirs.files[0].path }}"
  when: 
    - not sonarqube_installed.stat.exists
    - sonarqube_dirs.matched > 0

- name: Move SonarQube contents to application directory
  command: >
    cp -r "{{ extracted_sonarqube_path }}/." "{{ app_dir }}/sonarqube/"
  when: 
    - not sonarqube_installed.stat.exists
    - sonarqube_dirs.matched > 0
  notify: Restart SonarQube

- name: Ensure correct permissions for SonarQube directory
  file:
    path: "{{ app_dir }}/sonarqube"
    state: directory
    recurse: yes
    owner: "{{ sonarqube_user }}"
    group: "{{ sonarqube_group }}"

- name: Clean up temporary extraction directory
  file:
    path: "{{ app_dir }}/tmp/sonarqube-install"
    state: absent
  when: not sonarqube_installed.stat.exists

- name: Configure sonar.properties
  template:
    src: sonar.properties.j2
    dest: "{{ app_dir }}/sonarqube/conf/sonar.properties"
    owner: "{{ sonarqube_user }}"
    group: "{{ sonarqube_group }}"
    mode: '0644'
  notify: Restart SonarQube

- name: Deploy SonarQube systemd service
  template:
    src: sonarqube.service.j2
    dest: "/etc/systemd/system/sonarqube.service"
    mode: '0644'
  notify:
    - Reload systemd
    - Restart SonarQube

- name: Enable and start SonarQube service
  systemd:
    name: sonarqube
    state: started
    enabled: true